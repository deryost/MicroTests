$padding : .2rem; //.15vw;
$gutter : .2rem;
$maxWidthContainer: 600px;

html, body{
  margin: 0;
  padding: 0;
}
body{
  font-family: arial;
  background-color: #ccc;
  font-size: 12px;
  @media (min-width: 0px) and (max-width: 500px){
    font-size: 4vw;
    color: red;
  }
  @media (min-width: 501px) and (max-width: 800px){
    font-size: 2.5vw;
    color: green;
  }
  @media (min-width: 801px) and (max-width: 1200px){
    font-size: 2vw;
    color: blue;
  }
  @media (min-width: 1201px) and (max-width: 99999px){
    font-size: 1.5rem;
    color: black;
  }
}

@mixin grid($pad : -1){
  box-sizing: border-box;
  //display: -ms-flexbox;      /* TWEENER - IE 10 */
  display: -webkit-flex;     /* NEW - Chrome */
  display: flex;
  -webkit-flex-flow: row wrap;
  flex-flow: row wrap;
  justify-content: center;
  @if $pad != -1{
    padding: $pad;
  }
}

@mixin gridItem($col, $colTotal, $gut, $pad : -1){
  @if $gut == 0 {
    //border: 1px solid;
    $gut : 0.01%; // This is needed for nested flexbox in IE10 and IE11
    // Needed also when size is down in Chrome and firefox
  }
  box-sizing: border-box;
  width:  calc(#{$col}/#{$colTotal}*100% - (#{$gut} * 2) - 0.01%); // 0.01% is needed for IE10 and IE11, without it, items could not all fit on the same row
  margin: $gut;
  @if $pad != -1{
    padding: $pad;
  }
}
.guideContainer{
  //display: none;
  width: 100%;
  max-width: $maxWidthContainer;
  margin: 0 auto;
  background-color: rgba(0,255,0, .2);
  position: fixed;
  left: 50%;
  transform:translateX(-50%);
  z-index: 99999;
  > .guide{
    @include grid($gutter);
    width: 100%;
    > *{
      @include gridItem(1, 12, $gutter, $padding);
      background-color: rgba(255,0,0, .2);
      min-height: 100vh;
    }
  }
}
.container {
  max-width: $maxWidthContainer;
  margin: 0 auto;
  position: relative;
  > #header{
    background: #000;
    color: #fff;
    @include grid($gutter);
    > .logo{
      > img{
        width: 100%;
      }

      @include gridItem(1,3,$gutter, $padding);
      background-color: rgba(255,0,255, .5);
    }
    > .menu{
      @include gridItem(2,3,$gutter, $padding);
      background-color: rgba(0,255,255, .5);
    }
  }
  > .grid{
    @include grid($gutter);
    //padding: $padding;
    padding: $padding;
    background-color: #f0f;

    > *{
      order: 99;
      &:nth-child(2n+1){
        background-color: #bfb;
      }
      &:nth-child(2n){
        background-color: #fbb;
      }

      @media (min-width: 0px) and (max-width: 500px){
        &:nth-child(1n){
          @include gridItem(1, 1, $gutter, $padding);
        }
      }
      @media (min-width: 501px) and (max-width: 999999px){
        &:nth-child(1){
          @include gridItem(1, 3, $gutter, $padding);
          background-color: orange;
          order: 2;
        }
        &:nth-child(2){
          @include gridItem(2, 3, $gutter, $padding);
          background-color: yellow;
          order: 2;
        }
        &:nth-child(3), &:nth-child(4), &:nth-child(5){
          @include gridItem(1, 3, $gutter, $padding);
          order: 1;
        }
        &:nth-child(6), &:nth-child(7), &:nth-child(8), &:nth-child(9), &:nth-child(10), &:nth-child(11){
          @include gridItem(1,6, $gutter, $padding);
        }
        &:nth-child(12){
          @include gridItem(1,1, $gutter, $padding);
        }
        &:nth-child(13){
          @include gridItem(1,6, $padding);
        }
        &:nth-child(14){
          @include gridItem(3,6, $gutter, $padding);
        }
        &:nth-child(15){
          @include gridItem(2,6, $gutter, $padding);
        }
        &:nth-child(16), &:nth-child(17), &:nth-child(18), &:nth-child(19), &:nth-child(20), &:nth-child(21), &:nth-child(22){
          @include gridItem(1,5, $gutter, $padding);
        }
        &:nth-child(23){
          background-color: #ccc;
          @include gridItem(1,1,0);

          > .grid{
            @include grid(0);
            background-color: orange;
            > *{
              color: #fff;
              &:nth-child(1), &:nth-child(2){
                @include gridItem(1,10, $gutter, $padding);
              }
              &:nth-child(3){
                @include gridItem(1,5, $gutter, $padding);
              }
              &:nth-child(4){
                @include gridItem(2,5, $gutter, $padding);
              }
              &:nth-child(5){
                @include gridItem(1,5, $gutter, $padding);
              }
              &:nth-child(odd){
                background-color: #333;
              }
              &:nth-child(even){
                background-color: #666;
              }
            }
          }
        }
      }
    }
  }
}
